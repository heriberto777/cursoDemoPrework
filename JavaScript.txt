<h1>Resumen</h1>
¬øC√≥mo nace Javascript?
Nace con la necesidad de generar dinamismo en las p√°ginas web y que a su vez los usuarios y las empresas pudieran interactuar unos con otros.
¬øQu√© es Javascript?
Es un lenguaje interpretado, orientado a objetos, d√©bilmente tipado y din√°mico.
D√©bilmente tipado
Se pueden hacer operaciones entre tipos distintos de datos (enteros con strings, booleanos con enteros, etc). Ejemplo:

4 + "7"; // 47
4 * "7"; // 28
2 + true; // 3
false - 3; // -3
Din√°mico
Corre directamente en la etapa de Runetime sin una etapa de compilaci√≥n previa. Esto permite probar nuestro c√≥digo inmediatamente; pero tambi√©n es lo que hace que los errores se muestren hasta que se ejecuta el programa.
¬øRealmente es Javascript un lenguaje interpretado?
Si, y la raz√≥n es que le navegador lee linea por linea nuestro c√≥digo el cu√°l le indica lo que tiene que hacer, sin la necesidad de compilar. Todo esto es controlado por el motor de Javascript V8 del navegador
Javascript es Basckwards Compatible
Todas las funciones nuevas que salen de Javascript no da√±ar√°n el trabajo ya hecho, pero no se podr√° utilizar en nuestro entorno de trabajo inmediatamente. Para solucionar esto est√° Babel que permite utilizar las nuevas caracter√≠sticas del lenguaje pero lo transforma a una versi√≥n que el navegador pueda entender.

‚Äì

Espero les sea de utilidad üòâ


APUNTES
1.- JavaScript tiene una comunidad enorme de desarrolladores que te pueden ir ayudando a generar diferentes cosas.

Si solo estuvieras interesado en trabajar aplicaciones web tienes muchos frameworks y librer√≠as construidas en JavaScript que te van a ayudar a hacer proyectos de forma mucho mas r√°pida, eficiente y robusta (Angular, View, React,entre otros)

Si no quieres trabajar solo en aplicaciones Web puedes utilizar JavaScript con un framework que se llama React Native para poder construir aplicaciones nativas como Android y IOS.

Puedes construir aplicaciones de escritorio con JavaScript, usando un framework llamado Electron, pueden correr en Mac o Windows.

Tambi√©n puedes trabajar en la parte del Back-end o **IOT **(Internet Od Things) es un concepto que se refiere a una interconexion digital de objetos cotidianos con Internet. Esto con un Framework llamado NodeJS, el cual es un entorno de ejecuci√≥n de JavaScript que corre directamente en el Back-end.

Dentro de JavaScript tenemos tres formas de declarar una variable las cuales son: var, const y let.

Var: Era la forma en que se declaraban las variables hasta ECMAScript 5. Casi ya no se usa porque es de forma global y tiene las siguientes caracter√≠sticas:

o Se puede reinicializar: osea todas las variables se inicializan, por ejemplo:
Var pokemonType = ‚Äòelectric‚Äô entonces reinicializar es:
Var pokemonType = ‚Äògrass‚Äô osea la misma variable con diferentes datos el √∫ltimo dato predomina.
o Se puede reasignar: osea la variable ya inicializada le reasignamos otro valor por ejemplo: inicializamos la variable: Var pokemonType = ‚Äòelectric‚Äô ahora la reasignamos pokemonType = ‚Äògrass‚Äô ya no va var
o Su alcance es funci√≥n global: osea inicializamos la variable, pero la podemos llamar desde cualquier bloque (una llave abierta y una cerrada {}) pero hay que tener mucho cuidado con ello ya que puede haber peligro, no es recomendable usar VAR.

const y let es la forma en que se declaran las variables a partir de ECMAScript 6,

const: sirve para declarar variables que nunca van a ser modificadas:
o No se puede reinicilizar: es una const √∫nica no puede haber otra inicializada con el mismo nombre. const pokemonType = ‚Äòelectric‚Äô no puede haber:
const pokemonType = ‚Äògrass‚Äô
o No se pude re asignar: una vez que la hayamos inicializado no la podemos reasignar solo con su nombre: const pokemonType = ‚Äòelectric‚Äô no puede ejecutarse:
pokemonType = ‚Äògrass‚Äô
o No es inmutable: osea no puede cambiar con objetos:

Let: Son variables que pueden ser modificadas, se pueden cambiar:
o No se puede reinicilizar: es una const √∫nica no puede haber otra inicializada con el mismo nombre. let pokemonType = ‚Äòelectric‚Äô no puede haber:
let pokemonType = ‚Äògrass‚Äô
o Se puede reasignar: Osea la variable ya inicializada le reasignamos otro valor por ejemplo: inicializamos la variable: let pokemonType = ‚Äòelectric‚Äô ahora la reasignamos pokemonType = ‚Äògrass‚Äô
o Su contexto de es bloque: Solo funciona dentro de un bloque {}, fuera de ello no.


Funciones
Las funciones son las tareas que va a llevar a cabo el navegador. Existen 2 tipos de funciones
1) Declarativas
2) De expresi√≥n
Ambas pueden llevar par√°metros, que son los datos que necesitan para ejecutarse.
Cada par√°metro va separado por una coma.
Cada instrucci√≥n que tenga la funci√≥n debe terminar con ; .
Si queremos que una funci√≥n nos d√© un numero o dato tenemos que usar la siguiente sintaxis:

return El dato que queremos que nos d√©;

Las funciones declarativas tienen la siguiente sintaxis:
function Nombre de la funci√≥n (Par√°metros de la funci√≥n) {Instrucciones}

Un ejemplo de una funci√≥n puede ser una suma:
_
function suma (a,b) {return a+b;}_

Las funciones de expresi√≥n son aquellas que guardamos en una variable, por lo tanto, no es necesario nombrarlas y tienen la siguiente sintaxis:
_var Nombre de la variable = function(Parametros){Instrucciones}.
_

Un ejemplo de una funci√≥n de expresi√≥n ser√≠a:

var suma = function(a,b){return a+b;}

Para ejecutar las funciones debemos usar la siguiente sintaxis:
_Nombre de la funcion(Parametros funci√≥n); _

Si la funci√≥n no tiene ning√∫n par√°metro, √∫nicamente se escribe:

_Nombre de la funci√≥n(); _


¬øCu√°ndo utilizar una funci√≥n declarativa y una expresiva?
Curso B√°sico de JavaScript
degranda
4 de Febrero de 2020

Cuando hablamos de funciones en JavaScript, tenemos dos tipos de funciones: Funciones Declarativas (function declaration / function statement) y Expresiones de funci√≥n (function expression / funciones an√≥nimas).

Funciones Declarativas:
En las funciones declarativas, utilizamos la palabra reservada function al inicio para poder declarar la funci√≥n:

function saludar(nombre) {
	console.log(`Hola ${nombre}`);
}

saludar('Diego');

Expresi√≥n de funci√≥n:
En la expresi√≥n de funci√≥n, la declaraci√≥n se inicia con la palabra reservada var, donde se generar√° una variable que guardar√° un funci√≥n an√≥nima.

var nombre = function(nombre){
    console.log(`Hola ${nombre}`)
}

nombre(‚ÄòDiego‚Äô);

En la expresi√≥n de funci√≥n, la funci√≥n podr√≠a o no llevar nombre, aunque es m√°s com√∫n que se hagan an√≥nimas.

Diferencias:
A las funciones declarativas se les aplica hoisting, y a la expresi√≥n de funci√≥n, no. Ya que el hoisting solo se aplica en las palabras reservadas var y function.
"Hoisting es un t√©rmino que se refiere a c√≥mo funcionan los contextos de ejecuci√≥n en JavaScript (espec√≠ficamente las fases de creaci√≥n y ejecuci√≥n)."
Lo que quiere decir que con las funciones declarativas, 
podemos mandar llamar la funci√≥n antes de que √©sta sea declarada, 
y con la expresi√≥n de funci√≥n, no, tendr√≠amos que declararla primero, 
y despu√©s mandarla llamar.

Realice un resumen sobre lo que yo entend√≠ de lo que es el hoisting, aunque no s√© que tan correcto sea lo que yo aprendi, igual se los dejo esperando les sea de ayuda a entender el concepto de mejor manera:

El Hoisting es un proceso del compilador de JavaScript, que consiste en que la declaracion de las variables y las funciones son llevadas al inicio del codigo, sin importar su posicion, para su procesamiento, sin embargo, la inicializacion de las variables no es llevada al inicio del codigo para su compilacion, sino solo su declaracion, lo cual suele dar espacio a errores cuando se declara una variable sin inicializarla y se procesa en el codigo antes de haber llegado a su inicializacion, lo cual nos suele dar una variable con valor undefined, ya que la variable s√≠ fue almacenada en memoria, pero no se le asigno un valor hasta despues de su ejecuci√≥n.

Aqui un ejemplo de esto:

saludo();

function saludo() {
    console.log("Hola " + nombre);
}

var nombre = "Aaron";
El output de este codigo seria el siguiente:

Hola undefined
Debido a que como lo hemos dicho, la variable se tomo en cuenta y se le asigno memoria, sin embargo, el compilador no la inicializo y se le dio el valor de undefined, y con ese valor se ingreso a la funcion, y ya despues de correr la funcion se le asigno el valor.

Este comportamiendo se puede entender facilmente si se comprenden estos dos puntos esenciales:

Las funciones siempre se mueven arriba del scope. Por lo tanto, podemos elegir donde declararlas y usarlas.
La declaraci√≥n de las variables se mueven arriba del scope, pero no la asignaci√≥n. Antes de usar una variable, habr√° que crearla y asignarla.
En base al segundo punto, fue por eso que se cometio el error de usar la variable antes de inicializarla, pues sin problema el compilador le asigna memoria, pero no el valor hasta despues.

Basicamente por pasos, lo que hizo el compilador fue esto:

Tenemos el codigo asi:

saludo();

function saludo() {
    console.log("Hola " + nombre);
}

var nombre = "Aaron";
El compilador toma las funciones y variables y las ‚Äúsube‚Äù en el codigo, sin inicializar variables:

var nombre;

function saludo() {
    console.log("Hola " + nombre);
}

saludo();

var nombre = "Aaron";
Le asigna memoria a la variable y le da el valor de undefined al suceder la asignacion de memoria

var nombre = undefined;

function saludo() {
    console.log("Hola " + nombre);
}

saludo();

nombre = "Aaron";
Y como hemos visto, la variable se asigna como undefined y posteriormente su utiliza al llegar a la linea:

saludos()
pues ahi lo que hace es ejecutar la funcion que ya fue procesada, pero con un valor de la variable que aun no se le asigno, quedando como undefined.

Despues de correr la funcion, le asigna el valor correcto a la variable ya declarada:

var nombre = "Aaron";

function saludo() {
    console.log("Hola " + nombre);
}

saludo();

Pero ya es demasiado tarde, pues la funcion ya fue ejecutada.

Es por eso que se tiene como buena practica declarar e inicializar tanto variables como funciones al inicio de nuestro programa, sin importar donde sean utilizadas, pues de esta manera se evita usarlas antes de ser inicializadas.

Debemos saber que el hoisting solo sucede con las palabras claves var y function, por lo tanto esto nos dice que solo se da en las versiones de ECMAScript 5 o Inferiores, ya que en la version 6 y superiores se permite la declaracion de variables con let y const, que son dos nuevas variables que no activan hoisting.

Scope Global : todo el mundo.
Scope Local : Las Vegas, y lo que pasa en las vegas, se queda en Las Vegas.

Coerci√≥n es la forma en la que podemos cambiar un tipo de valor a otro, existen dos tipos de coerci√≥n:
Coerci√≥n impl√≠cita = es cuando el lenguaje nos ayuda a cambiar el tipo de valor.
Coerci√≥n explicita = es cuando obligamos a que cambie el tipo de valor.

var pregunta = prompt("Ingresa tu opci√≥n: piedra, papel o tijera "); 
var user = pregunta.toLowerCase();
var options = ["piedra", "papel", "tijera"];
var machine = options[Math.floor(Math.random() * 3)];


// let numero = 'a';
//con true los casos van a pasar 
switch (true) {
    case (user === machine):
        console.log('es un empate');
        break;
    case (machine === 'piedra' && user === 'papel'):
        console.log('Ganaste')
        break;
    case (machine === 'papel'  && user === 'tijera'):
        console.log('Ganaste')
        break;
    case (machine === 'tijera' && user === 'piedra'):
        console.log('Ganaste')
        break;
    default:
        console.log('¬°Perdiste!');       
}

Un Array es un tipo de estructura de datos, objeto. Puede guardar datos distintos dentro, guarda los datos en forma de lista.
.lenght devuelve la longitud del array.
.push() agrega elementos al final de array.
.pop() elimina un elemento del array.
.unshift() agrega un elemento al array, pero lo agrega en primer lugar.
**.shift() **elimina el elemento que est√° en el inicio del array.
**.indexOf ** devuelve la posici√≥n de un elemento del array.


Los bucles pueden ejecutar un bloque de c√≥digo varias veces. JavaScript admite diferentes tipos de bucles:

for - recorre un bloque de c√≥digo varias veces

for/in - recorre las propiedades de un objeto

for/of - recorre los valores de un objeto iterable

while - recorre un bloque de c√≥digo mientras se cumple una condici√≥n espec√≠fica

do/while - tambi√©n recorre un bloque de c√≥digo mientras se cumple una condici√≥n espec√≠fica


var estudiantes = ["Maria", "Jose", "Gonzalez", "Glenny", "Elizabeth", "Claribel"];

function saludarEstudiante(estudiantes) {
    console.log(`Hola, ${estudiantes}`);
}

for(var i = 0; i < estudiantes.lenght; i++){
    saludarEstudiante(estudiantes[i]);
}

for(var estudiante of estudiantes){
    saludarEstudiante(estudiante)
}

while




Objetos: JS es un lenguaje que est√° dise√±ado en un paradigma de objetos.

Ejemplo de Objeto:
var miAuto = {
marca: "Toyota",
modelo: "Corolla",
a√±o: 2020
}

Se pueden agregar propiedades que van a ser una funci√≥n, se les llama m√©todos de objetos.

var miAuto = {
marca: "Toyota",
modelo: "Corolla",
a√±o: 2020, 
detallesDelAuto: function () {
	console.log(`Auto ${this.modelo} ${this.a√±o}`);
}

// miAuto.detallesDelAuto();
//Auto Corolla 2020
¬øQui√©n es this?
Es una variable que hace referencia al objeto. En este caso: this = miAuto.

Para palabras mas sencillas‚Ä¶
Un objeto en programaci√≥n es una representaci√≥n abstracta de un objeto en la vida real, sin embargo tambi√©n puede entenderse como un contenedor de datos.
Ejemplo:
Una botella de refresco tiene ciertas caracter√≠sticas y acciones.-
Caracter√≠sticas: altura, volumen, color, contenido, dureza etc‚Ä¶
Acciones: beber, reciclar, rehusar, aventar, abrir tapa, etc‚Ä¶

Respectivamente a estas caracter√≠sticas y acciones se les conoce como atributos(caracter√≠sticas) y m√©todos(acciones) en programaci√≥n.

Los objetos son usados para almacenar ciertos datos que de otra manera ser√≠an muy sensibles al hackeo, por otro lado un objeto tambi√©n puede ser el valor de una variable.

A modo de adelanto una clase a su vez es un molde que puede almacenar objetos y esta tambi√©n como el objeto tiene atributos y m√©todos que puede heredar a cada uno de esos objetos conocida esta propiedad como herencia, en base a eso la clase this, es la clase principal desde la cual se ejecuta javascript a modo de ejemplo puedes consultar en consola del navegador console.log(this); y te dar√°s una mejor idea.

Un saludo a todos.üòÉüòÉüòÉüòÉüòÉüòÉ


var miAuto = {
marca: "Toyota",
modelo: "Corolla",
annio: 2020,
detalleDelAuto: function(){
    console.log(`Auto ${this.modelo} ${this.annio}`);
}
};
undefined
miAuto.detalleDelAuto();


// Este ejemplo es imaginando que recibimos una lista de 30 carros diferentes y se nos solicita que se almacene esta informaci√≥n, como estamos aprendiendo a usar js por que es un lenguaje cool y no queremos tipiar todo de manera normal y aburrida, usaremos este lenguaje c: as√≠ hacemos un peque√±o trabajo de separar todas las marcas, modelos y a√±os respectivamente en distintos arrays para as√≠ lograr juntarlos en uno solo usando una funci√≥n constructiva la cual indicara cada auto ingresado con su marca, modelo y a√±o respectivamente.

var marca = ["Audi", "Subaru", "Lexus", "Porsche", "BMW", "Mazda", "Buick", "Toyota", "Kia", "Honda", "Hyundai", "Volvo", "Mini", "Mercedes-Benz", "Volkswagen", "Ford", "Lincoln", "Scion", "Acura", "Chevrolet", "Nissan", "Infiniti", "GMC", "Cadillac", "Dodge", "Land", "Rover", "Mitsubishi", "Jeep", "Fiat"];
var modelo = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
var annio = [2020,2019,2018,2020,2020,2020,2018,2018,2020,2020,2020,2018,2018,2020,2020,2019,2020,2020,2019,2019,2020,2020,2019,2019,2019,2020,2019,2019,2018,2020];
var listaAutos = [];
function autoN(marca, modelo, annio){
    this.marca = marca;
    this.modelo = modelo;
    this.annio = annio;
} 
for (var i = 0; i<30; i++){   
    var autoNuevo = new autoN(marca[i],modelo[i],annio[i]);
    listaAutos.push(autoNuevo);
}

// Luego se nos solicito que filtremos los carros por medio del a√±o actual, ya que deseaban saber la cantidad de autos nuevos ingresados. Gracias a nuestro trabajo esto se pod√≠a saber de la siguiente manera:

var autosFiltrados = listaAutos.filter(function(auto){
    return auto.annio === 2020;
});
console.log(autosFiltrados);

// As√≠ logramos obtener una lista con todos los autos del a√±o 2020 c:

// Posterior a eso, se necesitaba obtener una lista urgentemente de las marcas de los 30 autos que acababan de ingresar por razones ajenas que no nos interesan c: Obviando que nosotros ya tenemos esta lista creada xD y queremos usar js para esto, esta tarea es tan sencilla como hacer: 

var marcasRecientes = listaAutos.map(function(auto){
    return auto.marca;
});
console.log(marcasRecientes);

// As√≠ obtenemos nuestra lista de marcas recientemente ingresadas c:
