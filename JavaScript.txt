<h1>Resumen</h1>
¬øC√≥mo nace Javascript?
Nace con la necesidad de generar dinamismo en las p√°ginas web y que a su vez los usuarios y las empresas pudieran interactuar unos con otros.
¬øQu√© es Javascript?
Es un lenguaje interpretado, orientado a objetos, d√©bilmente tipado y din√°mico.
D√©bilmente tipado
Se pueden hacer operaciones entre tipos distintos de datos (enteros con strings, booleanos con enteros, etc). Ejemplo:

4 + "7"; // 47
4 * "7"; // 28
2 + true; // 3
false - 3; // -3
Din√°mico
Corre directamente en la etapa de Runetime sin una etapa de compilaci√≥n previa. Esto permite probar nuestro c√≥digo inmediatamente; pero tambi√©n es lo que hace que los errores se muestren hasta que se ejecuta el programa.
¬øRealmente es Javascript un lenguaje interpretado?
Si, y la raz√≥n es que le navegador lee linea por linea nuestro c√≥digo el cu√°l le indica lo que tiene que hacer, sin la necesidad de compilar. Todo esto es controlado por el motor de Javascript V8 del navegador
Javascript es Basckwards Compatible
Todas las funciones nuevas que salen de Javascript no da√±ar√°n el trabajo ya hecho, pero no se podr√° utilizar en nuestro entorno de trabajo inmediatamente. Para solucionar esto est√° Babel que permite utilizar las nuevas caracter√≠sticas del lenguaje pero lo transforma a una versi√≥n que el navegador pueda entender.

‚Äì

Espero les sea de utilidad üòâ


APUNTES
1.- JavaScript tiene una comunidad enorme de desarrolladores que te pueden ir ayudando a generar diferentes cosas.

Si solo estuvieras interesado en trabajar aplicaciones web tienes muchos frameworks y librer√≠as construidas en JavaScript que te van a ayudar a hacer proyectos de forma mucho mas r√°pida, eficiente y robusta (Angular, View, React,entre otros)

Si no quieres trabajar solo en aplicaciones Web puedes utilizar JavaScript con un framework que se llama React Native para poder construir aplicaciones nativas como Android y IOS.

Puedes construir aplicaciones de escritorio con JavaScript, usando un framework llamado Electron, pueden correr en Mac o Windows.

Tambi√©n puedes trabajar en la parte del Back-end o **IOT **(Internet Od Things) es un concepto que se refiere a una interconexion digital de objetos cotidianos con Internet. Esto con un Framework llamado NodeJS, el cual es un entorno de ejecuci√≥n de JavaScript que corre directamente en el Back-end.

Dentro de JavaScript tenemos tres formas de declarar una variable las cuales son: var, const y let.

Var: Era la forma en que se declaraban las variables hasta ECMAScript 5. Casi ya no se usa porque es de forma global y tiene las siguientes caracter√≠sticas:

o Se puede reinicializar: osea todas las variables se inicializan, por ejemplo:
Var pokemonType = ‚Äòelectric‚Äô entonces reinicializar es:
Var pokemonType = ‚Äògrass‚Äô osea la misma variable con diferentes datos el √∫ltimo dato predomina.
o Se puede reasignar: osea la variable ya inicializada le reasignamos otro valor por ejemplo: inicializamos la variable: Var pokemonType = ‚Äòelectric‚Äô ahora la reasignamos pokemonType = ‚Äògrass‚Äô ya no va var
o Su alcance es funci√≥n global: osea inicializamos la variable, pero la podemos llamar desde cualquier bloque (una llave abierta y una cerrada {}) pero hay que tener mucho cuidado con ello ya que puede haber peligro, no es recomendable usar VAR.

const y let es la forma en que se declaran las variables a partir de ECMAScript 6,

const: sirve para declarar variables que nunca van a ser modificadas:
o No se puede reinicilizar: es una const √∫nica no puede haber otra inicializada con el mismo nombre. const pokemonType = ‚Äòelectric‚Äô no puede haber:
const pokemonType = ‚Äògrass‚Äô
o No se pude re asignar: una vez que la hayamos inicializado no la podemos reasignar solo con su nombre: const pokemonType = ‚Äòelectric‚Äô no puede ejecutarse:
pokemonType = ‚Äògrass‚Äô
o No es inmutable: osea no puede cambiar con objetos:

Let: Son variables que pueden ser modificadas, se pueden cambiar:
o No se puede reinicilizar: es una const √∫nica no puede haber otra inicializada con el mismo nombre. let pokemonType = ‚Äòelectric‚Äô no puede haber:
let pokemonType = ‚Äògrass‚Äô
o Se puede reasignar: Osea la variable ya inicializada le reasignamos otro valor por ejemplo: inicializamos la variable: let pokemonType = ‚Äòelectric‚Äô ahora la reasignamos pokemonType = ‚Äògrass‚Äô
o Su contexto de es bloque: Solo funciona dentro de un bloque {}, fuera de ello no.


Funciones
Las funciones son las tareas que va a llevar a cabo el navegador. Existen 2 tipos de funciones
1) Declarativas
2) De expresi√≥n
Ambas pueden llevar par√°metros, que son los datos que necesitan para ejecutarse.
Cada par√°metro va separado por una coma.
Cada instrucci√≥n que tenga la funci√≥n debe terminar con ; .
Si queremos que una funci√≥n nos d√© un numero o dato tenemos que usar la siguiente sintaxis:

return El dato que queremos que nos d√©;

Las funciones declarativas tienen la siguiente sintaxis:
function Nombre de la funci√≥n (Par√°metros de la funci√≥n) {Instrucciones}

Un ejemplo de una funci√≥n puede ser una suma:
_
function suma (a,b) {return a+b;}_

Las funciones de expresi√≥n son aquellas que guardamos en una variable, por lo tanto, no es necesario nombrarlas y tienen la siguiente sintaxis:
_var Nombre de la variable = function(Parametros){Instrucciones}.
_

Un ejemplo de una funci√≥n de expresi√≥n ser√≠a:

var suma = function(a,b){return a+b;}

Para ejecutar las funciones debemos usar la siguiente sintaxis:
_Nombre de la funcion(Parametros funci√≥n); _

Si la funci√≥n no tiene ning√∫n par√°metro, √∫nicamente se escribe:

_Nombre de la funci√≥n(); _

